// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: jobsched.proto

package jobsched

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// JobSchedClient is the client API for JobSched service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JobSchedClient interface {
	ExecutorRun(ctx context.Context, opts ...grpc.CallOption) (JobSched_ExecutorRunClient, error)
	AddJob(ctx context.Context, in *AddJobRequest, opts ...grpc.CallOption) (*AddJobResponse, error)
}

type jobSchedClient struct {
	cc grpc.ClientConnInterface
}

func NewJobSchedClient(cc grpc.ClientConnInterface) JobSchedClient {
	return &jobSchedClient{cc}
}

func (c *jobSchedClient) ExecutorRun(ctx context.Context, opts ...grpc.CallOption) (JobSched_ExecutorRunClient, error) {
	stream, err := c.cc.NewStream(ctx, &JobSched_ServiceDesc.Streams[0], "/jobsched.JobSched/ExecutorRun", opts...)
	if err != nil {
		return nil, err
	}
	x := &jobSchedExecutorRunClient{stream}
	return x, nil
}

type JobSched_ExecutorRunClient interface {
	Send(*ExecutorRunRequest) error
	Recv() (*ExecutorRunResponse, error)
	grpc.ClientStream
}

type jobSchedExecutorRunClient struct {
	grpc.ClientStream
}

func (x *jobSchedExecutorRunClient) Send(m *ExecutorRunRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *jobSchedExecutorRunClient) Recv() (*ExecutorRunResponse, error) {
	m := new(ExecutorRunResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *jobSchedClient) AddJob(ctx context.Context, in *AddJobRequest, opts ...grpc.CallOption) (*AddJobResponse, error) {
	out := new(AddJobResponse)
	err := c.cc.Invoke(ctx, "/jobsched.JobSched/AddJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JobSchedServer is the server API for JobSched service.
// All implementations must embed UnimplementedJobSchedServer
// for forward compatibility
type JobSchedServer interface {
	ExecutorRun(JobSched_ExecutorRunServer) error
	AddJob(context.Context, *AddJobRequest) (*AddJobResponse, error)
	mustEmbedUnimplementedJobSchedServer()
}

// UnimplementedJobSchedServer must be embedded to have forward compatible implementations.
type UnimplementedJobSchedServer struct {
}

func (UnimplementedJobSchedServer) ExecutorRun(JobSched_ExecutorRunServer) error {
	return status.Errorf(codes.Unimplemented, "method ExecutorRun not implemented")
}
func (UnimplementedJobSchedServer) AddJob(context.Context, *AddJobRequest) (*AddJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddJob not implemented")
}
func (UnimplementedJobSchedServer) mustEmbedUnimplementedJobSchedServer() {}

// UnsafeJobSchedServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JobSchedServer will
// result in compilation errors.
type UnsafeJobSchedServer interface {
	mustEmbedUnimplementedJobSchedServer()
}

func RegisterJobSchedServer(s grpc.ServiceRegistrar, srv JobSchedServer) {
	s.RegisterService(&JobSched_ServiceDesc, srv)
}

func _JobSched_ExecutorRun_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(JobSchedServer).ExecutorRun(&jobSchedExecutorRunServer{stream})
}

type JobSched_ExecutorRunServer interface {
	Send(*ExecutorRunResponse) error
	Recv() (*ExecutorRunRequest, error)
	grpc.ServerStream
}

type jobSchedExecutorRunServer struct {
	grpc.ServerStream
}

func (x *jobSchedExecutorRunServer) Send(m *ExecutorRunResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *jobSchedExecutorRunServer) Recv() (*ExecutorRunRequest, error) {
	m := new(ExecutorRunRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _JobSched_AddJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobSchedServer).AddJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jobsched.JobSched/AddJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobSchedServer).AddJob(ctx, req.(*AddJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// JobSched_ServiceDesc is the grpc.ServiceDesc for JobSched service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JobSched_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "jobsched.JobSched",
	HandlerType: (*JobSchedServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddJob",
			Handler:    _JobSched_AddJob_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ExecutorRun",
			Handler:       _JobSched_ExecutorRun_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "jobsched.proto",
}
